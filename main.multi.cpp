#include "microvium.h"
#include "concrete.h"

int main(int argc, char **argv) {
    uint8_t snapshot[] = {0x06,0x1c,0x06,0x00,0x52,0x01,0xf5,0xe9,0x03,0x00,0x00,0x00,0x1c,0x00,0x22,0x00,0x2a,0x00,0x2a,0x00,0x30,0x00,0x36,0x00,0x30,0x01,0x42,0x01,0xff,0xff,0xfe,0xff,0xfc,0xff,0xff,0xff,0x75,0x00,0xfe,0xff,0xd5,0x00,0x41,0x01,0x3d,0x01,0x01,0x00,0x4d,0x00,0x39,0x00,0x41,0x00,0x05,0x40,0x70,0x75,0x73,0x68,0x00,0x00,0x09,0x40,0x7b,0x22,0x69,0x64,0x78,0x22,0x3a,0x20,0x00,0x00,0x0a,0x40,0x2c,0x20,0x22,0x66,0x69,0x62,0x22,0x3a,0x20,0x00,0x02,0x60,0x00,0x00,0x02,0x60,0x01,0x00,0x02,0x60,0x02,0x00,0x0d,0x50,0x04,0x31,0x30,0x30,0x88,0x1d,0x00,0x6b,0x12,0x6f,0x67,0x01,0x60,0x00,0x2f,0x50,0x05,0x88,0x19,0x00,0x89,0x00,0x00,0x88,0x1d,0x00,0x6b,0xa0,0x88,0x19,0x00,0x06,0xa0,0x10,0x12,0xe0,0x70,0x04,0x67,0x67,0x01,0x60,0x89,0x00,0x00,0x10,0x12,0x6b,0x11,0x78,0x01,0xa0,0x67,0x10,0x10,0x07,0x6c,0x10,0xa2,0x67,0x67,0x76,0xe2,0x00,0x00,0x00,0x28,0x50,0x09,0x31,0x89,0x03,0x00,0x01,0x88,0x41,0x00,0x89,0x01,0x00,0x01,0x15,0x10,0x07,0x6c,0x10,0xa7,0x67,0x78,0x02,0x6c,0x88,0x4d,0x00,0x6c,0x89,0x02,0x00,0x01,0x32,0x78,0x02,0x6c,0x78,0x02,0x67,0x01,0x60,0x00,0x00,0x5b,0x50,0x09,0x88,0x19,0x00,0x88,0x19,0x00,0x88,0x19,0x00,0x88,0x19,0x00,0x06,0xa3,0x06,0xa2,0x89,0x04,0x00,0x01,0x15,0x10,0x07,0x6c,0x10,0xa7,0x67,0x15,0x78,0x03,0x67,0x07,0xa1,0x89,0x04,0x00,0x01,0x15,0x10,0x07,0x6c,0x10,0xa7,0x67,0x14,0x78,0x03,0x67,0x06,0xa0,0x13,0x31,0xe0,0x70,0x04,0x80,0x04,0x01,0x60,0x11,0x13,0x6c,0x10,0xa1,0x67,0x11,0x10,0xa3,0x67,0x10,0x10,0xa2,0x67,0x89,0x04,0x00,0x01,0x15,0x10,0x07,0x6c,0x10,0xa7,0x67,0x13,0x78,0x03,0x67,0x76,0xd8,0x00,0x0c,0x00,0x59,0x00,0x5d,0x00,0x61,0x00,0xa9,0x00,0x19,0x00,0x02,0x00,0x19,0x00,0x01,0x00,0x08,0xc0,0x05,0x00,0x05,0x00,0x39,0x00,0x65,0x00,0x04,0xd0,0x05,0x00,0x03,0x00};

    int limit = 50;
    int iterate = 1;
    if (argc == 3) {
        limit = atoi(argv[1]);
        iterate = atoi(argv[2]);
    }

    Concrete app;
    app.initialise(snapshot, sizeof(snapshot));

    for (auto idx = 0; idx < iterate; idx++) {
        app.fibonacci(limit);
    }

    return 0;
}
